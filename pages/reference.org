#+TITLE: The Carth Reference
#+INCLUDE: "../page.org"

This document is the primary reference for the Carth programming
language. It is updated on a best-effort basis. It should be valid and
complete, but it may not be.

* TODO Introduction

** TODO How to use this document

** TODO Contributing
   [[https://gitlab.com/JoJoZ/carth-website/tree/master/pages/reference.org][Here is this file in the gitlab repository]].

** TODO Influences

** TODO Glossary

* TODO Lexical structure

* TODO Macros

* TODO Packages, modules, and source files

* TODO Items

** TODO Global variable definitions
   Global variables are defined at the top-level by using either one
   of the two implicitly typed /variable ~define~/ and /function
   ~define~/ special forms, or their explicitly typed ~define:~
   counterparts.

   Global variables are practically equivalent to local variables, in
   all respects but scope.

*** Syntax
    #+BEGIN_SRC bnf
    definition
        = "(", ( implicitly typed definition | explicitly typed definition ), ")" ;

    implicitly typed definition
        = variable definition | function definition ;
    explicitly typed definition
        = typed variable definition | typed function definition ;

    variable definition
        = "define", name, expression ;
    function definition
        = "define", "(", name, parameter, { parameter }, ")", expression ;

    typed variable definition
        = "define:", name, definition type, expression ;
    typed function definition
        = "define:"
        , "(", name, parameter, { parameter }, ")"
        , definition type, expression ;

    name = small identifier ;
    parameter = small identifier ;

    definition type = polytype | monotype ;
    polytype = "(", "forall", "(", { monotype }, ")", monotype, ")" ;
    #+END_SRC

*** Examples
    #+BEGIN_SRC carth
    ;; First form. Implicitly typed variable definition.
    ;;
    ;; Bind the global variable ~id-iv~ to the identity function. No explicit type
    ;; signature is given - it is statically inferred by the typechecker to be the
    ;; equivalent of ~(forall [a] (Fun a a))~
    (define id-iv
      (fun x x))

    ;; Second form. Implicitly typed function definition.
    ;;
    ;; Again, the identity function, equivalent to the defition above, but using the
    ;; more convenient function definition syntax.
    (define (id-if x)
      x)

    ;; Third form. Explicitly typed variable definition.
    ;;
    ;; Explicit type signature is given. The type must properly be a polytype (aka
    ;; /type scheme/) to be valid and instantiable for any monotype.
    (define: id-ev
        (forall [a] (Fun a a))
      (fun x x))

    ;; Fourth form. Explicitly typed function definition.
    (define: (id-ef x)
        (forall [a] (Fun a a))
      x)
    #+END_SRC

** TODO Type definitions

* TODO Expressions
** Literals
*** Unit
    ~unit~ is the only value inhibiting the type ~Unit~, equivalent to
    ~()~ in Haskell and Rust.

*** Int
    64-bit signed integer literal.

**** Example
     ~42~

*** Double
    64-bit double precision floating point literal

**** Example
     ~-13.37~

*** Char
    4-byte UTF-32 Character literal.

**** Example
     ~'a'~, ~'Á∂≠'~, ~'üî•'~

*** String
    UTF-8 string literals. At the moment, generates to static arrays. Will likely be changed.

**** Example
     ~"Hello, World!"~, ~"üòÑüò¶üê±"~

*** Bool
    ~True~ or ~False~
** Type ascription
   Type ascriptions are primarily used to:
   - increase readability when the type of an expression is not obvious;
   - assert at compile-time that an expression is of or can specialize to the given type;
   - or specialize the type of a generic expression, restricting its usage.

*** Syntax
    #+BEGIN_SRC bnf
    type ascription = "(", ":", expression, type, ")" ;
    #+END_SRC

*** Example
    #+BEGIN_SRC carth
    (: x Int)
    #+END_SRC

** Match
   Pattern matching. Used to deconstruct algebraic datatypes.

*** Syntax
    #+BEGIN_SRC bnf
    match = "(", "match", expression, case, { case } , ")" ;
    case = "(", pattern, expression, ")" ;
    pattern = constructor | pattern construction | variable ;
    pattern construction = "(", constructor, pattern, { pattern }, ")" ;
    #+END_SRC

*** Example
    #+BEGIN_SRC carth
    (match p
      [(Pair a _) a])
    #+END_SRC

** FunMatch
   Syntax sugar for a ~match~ in a lambda. Equivalent to ~\case~
   (LambdaCase) in Haskell. ~(fun-match cases...)~ translates to ~(fun
   VAR (match VAR cases...))~ where ~VAR~ is a uniquely internally
   generated variable that cannot be expressed by the user (which
   means it won't shadow any other binding).

*** Syntax
    #+BEGIN_SRC bnf
    fun-match = "(", "fun-match", case, { case } , ")" ;
    #+END_SRC

*** Example
    #+BEGIN_SRC carth
    ;; Two versions of `fst`, which returns the first value of a pair
    ;;
    ;; using normal `match`
    (define (fst-nofun p)
      (match p
        [(Pair a _) a]))
    ;; and using `fun-match`
    (define fst-fun
      (fun-match
        [(Pair a _) a]))
    #+END_SRC
* TODO Patterns

* TODO Type system

* TODO Memory model

* TODO Linkage

* TODO Unsafety

* TODO Compile time evaluation

* TODO Runtime
* TODO Literate Carth
  :PROPERTIES:
  :CUSTOM_ID: Literate-Carth
  :END:
  Carth has native support for literate programming with Org
  mode. Either use Emacs with Babel in Org-mode for an interactive
  session, or interpret/compile the file with ~carth~ just like a
  normal ~.carth~ file!

** Example
   Consider a file ~cool.org~ with the following content:

   #+BEGIN_SRC org

   ,#+TITLE: Literate Programming Rules!

   Literate programming is just really cool!

   ~carth~ will assume ~tangle~ = ~yes~ by default, but setting it
   explicitly won't hurt.

   ,#+BEGIN_SRC carth :tangle yes
   (define (main _)
     (printInt (id 1337)))
   ,#+END_SRC

   ,* The ~id~ function
     ~id~ is the identity function. It returns its argument unchanged.

     ,#+BEGIN_SRC carth
     (define (id x) x)
     ,#+END_SRC

   ,* How not to use ~id~
     Here is an example of how not to use ~id~. Note that this won't
     compile. We show this in a SRC block to get syntax highlighting etc,
     but as ~tangle~ is ~no~, this source block will be ignored by carth.

     ,#+BEGIN_SRC carth :tangle no
     (printInt id)
     ,#+END_SRC

   #+END_SRC

   When e.g. interpreting this file with ~carth i cool.org~, the Carth
   source will untangled from the rest of the document. Line numbers
   are preserved. The result of the untangling stage will be the
   following:

   #+BEGIN_SRC carth









   (define (main _)
     (printInt (id 1337)))






   (define (id x) x)











   #+END_SRC

   And for completeness, the result of interpreting that will be ~1337~.
